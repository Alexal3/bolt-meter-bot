const TelegramBot = require('node-telegram-bot-api')
const mongoose = require('mongoose')
const keys = require('./keys')
const { ChartJSNodeCanvas } = require('chartjs-node-canvas')
const datalabels = require('chartjs-plugin-datalabels')

console.log('Bot has been started ...')

mongoose.connect(keys.DB_URL)
  .then(() => console.log('MongoDB connected'))
  .catch((e) => console.log(e))

require('./models/user.model')

const User = mongoose.model('user')

// –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç canvas
const chartJSNodeCanvas = new ChartJSNodeCanvas({
  width: 700,
  height: 500,
  backgroundColour: 'white',
  chartCallback: (ChartJS) => {
    ChartJS.register(datalabels)
  }
})

// ========================================

const bot = new TelegramBot(keys.TOKEN, {
  polling: true
})

bot.onText(/\/start/, msg => {
  const text =  '<b>–ü—Ä–∏–≤–µ—Ç)</b> üôã‚Äç‚ôÇÔ∏è –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–µ—Ä—è–µ—Ç –±–æ–ª—Ç—ã.üî©\n\n' +
                'üìè –ß—Ç–æ–±—ã <b>–ø–æ–º–µ—Ä—è—Ç—å</b> –±–æ–ª—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É <b>/stats</b>.\n\n' +
                'üÜï <b>–ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏–Ω—É</b> –±–æ–ª—Ç–∞ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π <b>/dick</b> (—Ä–∞–Ω–¥–æ–º–Ω–æ –æ—Ç -5 —Å–º –¥–æ +10 —Å–º). –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏.\n\n' +
                'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ <b>–≥—Ä—É–ø–ø–∞—Ö</b>.\n\n' +
                '‚ùì‚ùî –ï—Å—Ç—å <b>–≤–æ–ø—Ä–æ—Å—ã</b>? –ü—Ä–æ–ø–∏—à–∏ <b>/help</b>.';

  bot.sendMessage(msg.chat.id, text, {
    parse_mode: 'HTML'
  })
})

// –í—ã—Ä–∞—Å—Ç–∏—Ç—å/—É–º–µ–Ω—å—à–∏—Ç—å –±–æ–ª—Ç
bot.onText(/\/dick/, async msg => {
  try {
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –õ–°, —Ç–æ –≥–æ–≤–æ—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö
    if (!(msg.chat.type == 'group' || msg.chat.type == 'supergroup')) {
      bot.sendMessage(msg.chat.id, '–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ <b>–≥—Ä—É–ø–ø–∞—Ö</b>', {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É',
                url: 't.me/BoltMeterBot?startgroup=true'
              }
            ]
          ]
        }
      })

      return
    }

    let user;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î.
    user = await User.findOne({userId: msg.from.id, chatId: msg.chat.id})

    // –ï—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Ç—É–¥–∞
    if (user === null) {
      await User.create({userId: msg.from.id, chatId: msg.chat.id, length: 0})
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–≥—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–≥–æ–¥–Ω—è
    user = await User.findOne({userId: msg.from.id, chatId: msg.chat.id})

    let text

    // –ï—Å–ª–∏ –Ω–µ—Ç, –º–µ–Ω—è–µ–º –¥–ª–∏–Ω–Ω—É –±–æ–ª—Ç–∞ –∏ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã
    if (user.dateOfLastGame === undefined || (Date.now() > Date.parse(user.dateOfLastGame) + 1000 * 60 * 60 * 24)) {
      let changeInBoltLength
      if (user.length == 0) {
        changeInBoltLength = Math.floor(Math.random() * 10 + 1)
      } else {
        changeInBoltLength = Math.floor(Math.random() * 16 - 5)
      }

      let oldLength = user.length

      if (user.length + changeInBoltLength < 0) {
        newLength = 0
      } else {
        newLength = user.length + changeInBoltLength;
      }

      await User.updateOne({userId: msg.from.id, chatId: msg.chat.id}, {length: newLength, dateOfLastGame: new Date()})
      user = await User.findOne({userId: msg.from.id, chatId: msg.chat.id})

      let change
      if (newLength - oldLength >= 0) {
        change = '–≤—ã—Ä–æ—Å'
      } else {
        change = '—É–º–µ–Ω—å—à–∏–ª—Å—è'
      }

      text =  `üî© –¢–≤–æ–π –±–æ–ª—Ç ${change} –Ω–∞ <b>${Math.abs(newLength - oldLength)} —Å–º</b>.\n\n` +
              `üßÆ –¢–µ–ø–µ—Ä—å –æ–Ω —Ä–∞–≤–µ–Ω <b>${user.length} —Å–º</b>.\n\n` +
              'üìÜ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ <b>–∑–∞–≤—Ç—Ä–∞</b>!'

    // –ï—Å–ª–∏ –¥–∞
    } else {
      text =  `üéÆ –¢—ã —É–∂–µ <b>–∏–≥—Ä–∞–ª</b>.\n\n` +
              `üßÆ –°–µ–π—á–∞—Å –æ–Ω —Ä–∞–≤–µ–Ω <b>${user.length} —Å–º</b>.\n\n` +
              'üìÜ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ <b>–∑–∞–≤—Ç—Ä–∞</b>!'
    }

    // –ü–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.sendMessage(msg.chat.id, text, {
      parse_mode: 'HTML'
    })
  } catch (e) {
    console.log(e);
  }
})

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.onText(/\/stats/, async msg => {
  try {
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –õ–°, —Ç–æ –≥–æ–≤–æ—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö
    if (!(msg.chat.type == 'group' || msg.chat.type == 'supergroup')) {
      bot.sendMessage(msg.chat.id, '–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ <b>–≥—Ä—É–ø–ø–∞—Ö</b>', {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É',
                url: 't.me/BoltMeterBot?startgroup=true'
              }
            ]
          ]
        }
      })

      return
    }

    // –î–æ—Å—Ç–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–∏–≥—Ä–æ–∫–æ–≤ —á–∞—Ç–∞
    let users = await User.find({chatId: msg.chat.id})

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏—Ö –∏–º–µ–Ω–∞
    for (let i = 0; i < users.length; i++) {
      let chatMember = await bot.getChatMember(users[i].chatId, users[i].userId)

      if (chatMember.user.last_name === undefined) {
        users[i].title = `${users[i].length} —Å–º - ${chatMember.user.first_name}`;
      } else {
        users[i].title = `${users[i].length} —Å–º - ${chatMember.user.first_name} ${chatMember.user.last_name}`
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–π
    users.sort((user1, user2) => user1.length - user2.length).reverse()

    // –†–∏—Å—É–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
    const configuration = {
      type: 'pie',
      data: {
        labels: users.map(user => user.title),
        datasets: [
          {
            data: users.map(user => user.length),
            backgroundColor: [  'rgb(255, 99, 132)',
                                'rgb(255, 159, 64)',
                                'rgb(255, 205, 86)',
                                'rgb(75, 192, 192)',
                                'rgb(54, 162, 235)',
                                'rgb(153, 102, 255)',
                                'rgb(201, 203, 207)'  ],
            cutout: 35,
            radius: 180,
          }
        ]
      },
      options: {
        plugins: {
          legend: {
            position: 'right',
            labels: {
              usePointStyle: true,
              pointStyle: 'rectRounded'
            }
          },
          title: {
            display: true,
            text: `–°–æ–∑–¥–∞–ª –±–æ—Ç - @${(await bot.getMe()).username}`,
            padding: {
              bottom: 40
            },
            font: {
              size: 20
            }
          },
          datalabels: {
            formatter: (value, ctx) => {
              let sum = 0
              let dataArr = ctx.chart.data.datasets[0].data
              dataArr.map(data => {
                sum += data;
              })
              let percentage = (value*100 / sum).toFixed(2)+"%"
              return percentage
            },
            color: '#fff',
            font: {
              size: 14,
              weight: 'bold'
            }
          }
        },
        layout: {
          padding: 50
        }
      }
    };
    let image = await chartJSNodeCanvas.renderToBuffer(configuration);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É-–¥–∏–∞–≥—Ä–∞–º–º—É
    bot.sendPhoto(msg.chat.id, image)
  } catch (e) {
    console.log(e);
  }
})

// –ü–æ–º–æ—â—å
bot.onText(/\/help/, msg => {
  const text =  'üíª <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n' +
                '<b>/dick</b> - –í—ã—Ä–∞—Å—Ç–∏—Ç—å/—É–º–µ–Ω—å—à–∏—Ç—å –±–æ–ª—Ç\n' +
                '<b>/stats</b> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
                '<b>/help</b> - –ü–æ–º–æ—â—å\n\n' +
                'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ <b>–≥—Ä—É–ø–ø–∞—Ö</b>.\n\n' +
                'üñã<b>–ö–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞</b>? - @alexal_blog';

  bot.sendMessage(msg.chat.id, text, {
    parse_mode: 'HTML'
  })
})

// –ö–æ–≥–¥–∞ –±–æ—Ç–∞ –¥–æ–±–∞–≤–ª—è—é—Ç –≤ –≥—Ä—É–ø–ø—É
bot.on('new_chat_members', async msg => {
  if (msg.new_chat_participant.id === keys.BOT_ID) {
    await User.updateMany({chatId: msg.chat.id}, {inTheSameChatWithTheBot: true})

    const text =  '<b>–ü—Ä–∏–≤–µ—Ç)</b> üôã‚Äç‚ôÇÔ∏è –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–µ—Ä—è–µ—Ç –±–æ–ª—Ç—ã.üî©\n\n' +
                  'üìè –ß—Ç–æ–±—ã <b>–ø–æ–º–µ—Ä—è—Ç—å</b> –±–æ–ª—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É <b>/stats</b>.\n\n' +
                  'üÜï <b>–ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏–Ω—É</b> –±–æ–ª—Ç–∞ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π <b>/dick</b> (—Ä–∞–Ω–¥–æ–º–Ω–æ –æ—Ç -5 —Å–º –¥–æ +10 —Å–º). –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏.\n\n' +
                  'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ <b>–≥—Ä—É–ø–ø–∞—Ö</b>.\n\n' +
                  '‚ùì‚ùî –ï—Å—Ç—å <b>–≤–æ–ø—Ä–æ—Å—ã</b>? –ü—Ä–æ–ø–∏—à–∏ <b>/help.</b>'

    bot.sendMessage(msg.chat.id, text, {
      parse_mode: 'HTML'
    })
  }
})

// –ö–æ–≥–¥–∞ –±–æ—Ç–∞ —É–¥–∞–ª—è—é—Ç –∏–∑ –≥—Ä—É–ø–ø—ã
bot.on('left_chat_member', async msg => {
  if (msg.left_chat_participant.id === keys.BOT_ID) {
    await User.updateMany({chatId: msg.chat.id}, {inTheSameChatWithTheBot: false})
  }
})
